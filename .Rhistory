install.packages("rmarkdown")
wd?
/
library(rmarkdown)
?rmarkdown
render("BZ_RMarkExercise.Rmd")
set wd elinck/Downloads
set wd "~/Downloads"
set wd "~/elinck/Downloads"
Simple R Markdown Example
Super-Advanced R, Spring 2014
Text
Writing text is easy; it is the default setting. Formatting text is also easy in **R Markdown** because it is a wrapper for **Markdown**.
A block quote:
She Walks in Beauty
She walks in beauty, like the night
Of cloudless climes and starry skies;
And all that's best of dark and bright
Meet in her aspect and her eyes; ...
by Lord Byron (George Gordon)
Read the full version here.
R code
You can embed an R code chunk like this:
y <- 1+1
print(y)
Embed inline R code like this:
I have 10*10 cousins.
We know the value of pi is pi.
Notice the text above is broken over two lines in the HTML file, but it spans three lines in the R Markdown file. What's happening?
In **Markdown** you can move text to the next line inside the same paragraph by ending a line with two or more spaces. You can also use any valid **HTML** syntax. <br \>
Like that.
You always have the option of using __HTML__ code in the .Rmd to have complete control over your final output file. However, this is not what __Markdown__ was intended for.
Displaying example code
To simply write code and have it be visually recognizable as code, use three back ticks without specifying a language. You can display inline fixed-width font like this or in a formatted code block like this.
y <- 1+1
print(y)
Notice the highlighting and most of the formatting above is lost. If you are writing code from a specific language that you want to display with highlighting, but is not evaluated you can do it using this option:
y <- 1+1
print(y)
Chunk options
Control treatment of code using chunk options. Below is an example of controlling results/source output:
Show the __R__ source code, but not the results:
y <- 1+1
print(y)
Show the results, but not the source code:
y <- 1+1
print(y)
Print the command prompt in front of echoed source code:
y <- 1+1
print(y)
Figures
You can also embed plots, for example:
plot(cars)
Now create a smaller plot:
plot(cars)
You can do this using two sets of chunk options, try the other now:
plot(cars)
Make sure you understand the difference between these two options, read about them in the handout.
Plot two figures in a single code chunk and make sure the source code prints to the report:
plot(cars)
plot(1,1)
Now use the option `fig.show` to cause both figures to print after all the source code in the chunk is printed to the report:
plot(cars)
plot(1,1)
Finally, let's control the horizontal placement of the figure to the center of the page.
plot(cars)
http://en.wikipedia.org/wiki/She_Walks_in_Beauty
Simple R Markdown Example
Super-Advanced R, Spring 2014
Text
Writing text is easy; it is the default setting. Formatting text is also easy in **R Markdown** because it is a wrapper for **Markdown**.
A block quote:
> She Walks in Beauty
She walks in beauty, like the night
Of cloudless climes and starry skies;
And all that's best of dark and bright
Meet in her aspect and her eyes; ...
by Lord Byron (George Gordon)
library(rmarkdown)
rmarkdown
months <- c("July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May", "June")
counts <- c(39, 39, 33, 20, 1, 0, 0, 0, 3, 7, 18, 14)
latinamerica <- as.bind("months","counts")
months <- c("July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May", "June")
counts <- c(39, 39, 33, 20, 1, 0, 0, 0, 3, 7, 18, 14)
latinamerica <- rbind("months","counts")
latinamerica
latinamerica <- rbind(months,counts)
latinamerica
months <- c("July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May", "June")
counts <- c(0, 0, 3, 7, 18, 14, 39, 39, 33, 20, 1, 0)
latinamerica <- rbind(months,counts)
boxplot(latinamerica)
barplot(latinamerica)
warnings
barplot(prop.table(table(latinamerica)))
View(latinamerica)
View(latinamerica)
months <- c("July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May", "June")
counts <- c(0, 0, 3, 7, 18, 14, 39, 39, 33, 20, 1, 0)
latinamerica <- table(months,counts)
months <- c("July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May", "June")
counts <- c(0, 0, 3, 7, 18, 14, 39, 39, 33, 20, 1, 0)
latinamerica <- table(months,counts)
barplot(latinamerica)
latinamerica
months <- c("July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May", "June")
counts <- c(0, 0, 3, 7, 18, 14, 39, 39, 33, 20, 1, 0)
latinamerica <- table(counts,months)
barplot(latinamerica)
latinameriza
latinamerica
latinamerica <- table(months,counts)
latinamerica
latinamerica <- table(months$counts)
latinamerica <- rbind(months,counts)
latinamerica
table(latinamerica)
barplot(latinamerica)
barplot(counts)
barplot(counts, names.arg="months")
barplot(counts, names.arg=months)
barplot(counts, xlim=c(0,50), names.arg=months)
latinamerica <- rbind(months,counts)
barplot(counts, ylim=c(0,50), names.arg=months)
barplot(counts, main="Painted Bunting specimen records south of Mexico by month", ylab="Total specimen count", xlab="Month", ylim=c(0,50), names.arg=months)
barplot(counts, main="Painted Bunting specimen records south of Mexico", ylab="Pooled specimen count", xlab="Month", ylim=c(0,50), names.arg=months)
#latin american record histogram
months <- c("Jul.", "Aug.", "Sept.", "Oct.", "Nov.", "Dec.", "Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.")
counts <- c(0, 0, 3, 7, 18, 14, 39, 39, 33, 20, 1, 0)
latinamerica <- rbind(months,counts)
barplot(counts, main="Painted Bunting specimen records south of Mexico", ylab="Pooled specimen count", xlab="Month", ylim=c(0,50), names.arg=months)
install.packages("adonis")
library(adonis)
install.packages("vegan")
data(dune)
adonis
library(vegan)
data(dune)
data(dune.env)
View(dune)
View(dune)
View(dune.env)
View(dune.env)
View(dune)
View(dune.env)
adonis(dune ~ Management*A1, data=dune.env, permutations=99)
dat <- expand.grid(rep=gl(2,1), NO3=factor(c(0,10)),field=gl(3,1) )
dat
Agropyron <- with(dat, as.numeric(field) + as.numeric(NO3)+2) +rnorm(12)/2
Schizachyrium <- with(dat, as.numeric(field) - as.numeric(NO3)+2) +rnorm(12)/2
total <- Agropyron + Schizachyrium
dotplot(total ~ NO3, dat, jitter.x=TRUE, groups=field,
type=c('p','a'), xlab="NO3", auto.key=list(columns=3, lines=TRUE) )
Y <- data.frame(Agropyron, Schizachyrium)
mod <- metaMDS(Y)
plot(mod)
### Hulls show treatment
ordihull(mod, group=dat$NO3, show="0")
ordihull(mod, group=dat$NO3, show="10", col=3)
### Spider shows fields
ordispider(mod, group=dat$field, lty=3, col="red")
### Correct hypothesis test (with strata)
adonis(Y ~ NO3, data=dat, strata=dat$field, perm=999)
### Incorrect (no strata)
adonis(Y ~ NO3, data=dat, perm=999)
?dune
cite("vegan")
library(vegan)
cite(vegan)
cite("vegan)
cite("vegan")
citation("vegan")
library(lme4)
citation(lme4)
citation("lme4")
setwd("~/Dropbox/Marianas/CNMI_bird_communities/")
'%!in%' <- function(x,y)!('%in%'(x,y))
library(unmarked);library(reshape);library(plyr);library(FD);library(sciplot);library(vegan);library(ggplot2);library(ggmap);library(mapdata);library(maps);library(lme4)
birdcounts <- read.table("./data/fulldata.txt", header=T) #load your data.
str(birdcounts)
birdcounts$date <- as.Date(birdcounts$date, "%m/%d/%y")
birdcounts$spp <- as.factor(as.character(tolower(birdcounts$spp)))
birdcounts$pointdate <- as.factor(paste(birdcounts$point, birdcounts$date, sep=" "))
birdcounts$sitedate <- as.factor(paste(birdcounts$site, birdcounts$date, sep=" "))
point.data <- birdcounts[!duplicated(birdcounts[2:4]),]
point.data <- point.data[order(point.data$point),]
point.data <- point.data[,-c(5:9)]
birdcounts.long <- untable(birdcounts[,c(1:6,8:11)], num=birdcounts[,7])
birdcounts.long <- subset(birdcounts.long, occasion <6)
birdcounts.long$occasion <- as.factor(birdcounts.long$occasion)
lambda.out <- data.frame(spp=character(),Predicted=numeric(),SE=numeric(),lower=numeric(),upper=numeric(),point=character())
phi.out <- lambda.out #do the same for phi
det.out <- lambda.out #do the same for det
lambda.island.out <- read.csv("lambda.island.out.csv",row.names=1)
phi.island.out <- read.csv("phi.island.out.csv",row.names=1)
lambda.island.out <- read.csv("/data/lambda.island.out.csv",row.names=1)
phi.island.out <- read.csv("/data/phi.island.out.csv",row.names=1)
lambda.island.out <- read.csv(".data/lambda.island.out.csv",row.names=1)
lambda.island.out <- read.csv("./data/lambda.island.out.csv",row.names=1)
phi.island.out <- read.csv("./data/phi.island.out.csv",row.names=1)
det.island.out <- read.csv("./data/det.island.out.csv",row.names=1)
lambda.island.out$spp <- as.character(lambda.island.out$spp)
lambda.island.out$island <- as.character(lambda.island.out$island)
interval <- c(1,1,4)
x.vals <- c(1,1+cumsum(rep(interval,length(levels(birdcounts.long$spp)))))
x.vals <- x.vals[1:(length(x.vals)-1)]
x.vals <- matrix(x.vals,ncol=3,byrow=T)
par(mfrow=c(1,1),pin=c(7,5))
plot(-10,
xlim=c(min(x.vals)-1,max(x.vals)+1),
ylim=c(min(lambda.island.out$lower),max(lambda.island.out$upper)),
frame.plot=F,
ylab="Abundance (birds / ha)",
xlab="Species",
las=1,
xaxt="n",
cex=2,
pch=16)
spp.converter<-c("apop"="mist",
"clma"="gowe",
"dima"="(bldr$)",
"gaxa"="wtgd",
"gaga"="(chic)",
"mota"="timo",
"myru"="mihe",
"ptro"="mafd",
"rhru"="rufa",
"stbi"="(iscd)",
"toch"="cokf",
"zoco"="brwe$",
"mela"="mime*",
"coku"="rocr*",
"gyal"="whte*")
lambda.island.out$spp<-revalue(lambda.island.out$spp,spp.converter)
phi.island.out$spp<-revalue(phi.island.out$spp,spp.converter)
det.island.out$spp<-revalue(det.island.out$spp,spp.converter)
orderbird<- c(3,8,14,11,10,6,7,1,12,9,2,15,13,5,4) # vector with preferred order
for(i in 1:length(levels(birdcounts.long$spp))) {
sp.set <- subset(lambda.island.out,lambda.island.out$spp==levels(birdcounts.long$spp)[orderbird[i]])
rownames(sp.set) <- sp.set$island
if(all(is.na(sp.set["Rota",]))) sp.set["Rota",] <- NA
if(all(is.na(sp.set["Tinian",]))) sp.set["Tinian",] <- NA
if(all(is.na(sp.set["Saipan",]))) sp.set["Saipan",] <- NA
sp.set <- sp.set[c("Saipan","Tinian","Rota"),]
sp.set[is.na(sp.set)] <- 0 # These are true zeros
segments(x0=x.vals[i,],y0=sp.set$lower,y1=sp.set$upper,
lwd=10,
lend="butt",
col=c("grey30","grey60","grey90"))
points(x.vals[i,],sp.set[,"Predicted"],
pch=c(21,22,23),
bg="white")
}
legend("topleft",pch=c(21,22,23),
legend=c("Saipan","Tinian","Rota"),
bty="n")
axis(1, at= x.vals[,2], labels = levels(revalue(birdcounts.long$spp,spp.converter))[orderbird], las=2)
abund.long <- lambda.out[,c(1,2,6)]
head(abund.long)
